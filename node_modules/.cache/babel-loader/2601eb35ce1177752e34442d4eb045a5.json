{"ast":null,"code":"import history from \"../history\"; // ACTION TYPES\n\nexport const GET_USER = \"GET_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\"; //ACTION CREATORS\n\nexport const getUser = user => ({\n  type: GET_USER,\n  user\n});\nexport const removeUser = () => ({\n  type: LOGOUT_USER\n});\nconst API = \"https://mdprofessionalcleaning-api.herokuapp.com/api/v1/\";\nexport const loginUser = user => {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        user\n      })\n    };\n    fetch(API + \"login\", reqObj).then(resp => resp.json()).then(data => {\n      if (data.user) {\n        dispatch(getUser(data.user));\n        localStorage.setItem(\"token\", data.jwt); //whereever you want to go after logging in\n\n        history.push(\"/dashboard\");\n      } //however you want  to  handle the error\n      else {\n          history.push(\"/login\");\n        }\n    });\n  };\n};\nexport const signUpUser = user => {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        user\n      })\n    };\n    fetch(API + \"users\", reqObj).then(resp => resp.json()).then(data => {\n      if (data.user) {\n        dispatch(getUser(data.user));\n        localStorage.setItem(\"token\", data.jwt); //whereever you want to go after logging in\n\n        history.push(\"/\");\n      } else {\n        //however you want  to  handle the error\n        history.push(\"/signup\");\n      }\n    });\n  };\n};\nexport const getCurrentUser = token => {\n  return dispatch => {\n    const reqObj = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    };\n    fetch(API + \"profile\", reqObj).then(resp => resp.json()).then(data => {\n      dispatch(getUser(data.user));\n    });\n  };\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    localStorage.removeItem(\"token\");\n    dispatch(removeUser());\n    history.push(\"/login\");\n  };\n};","map":{"version":3,"sources":["/Users/john/Desktop/projects/work/Self/md-professional-cleaning/mdprofesssionalcleaning-admin/src/actions/user.js"],"names":["history","GET_USER","LOGOUT_USER","getUser","user","type","removeUser","API","loginUser","dispatch","reqObj","method","headers","Accept","body","JSON","stringify","fetch","then","resp","json","data","localStorage","setItem","jwt","push","signUpUser","getCurrentUser","token","Authorization","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import history from \"../history\";\n\n// ACTION TYPES\n\nexport const GET_USER = \"GET_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\n\n//ACTION CREATORS\nexport const getUser = (user) => ({ type: GET_USER, user });\nexport const removeUser = () => ({ type: LOGOUT_USER });\n\nconst API = \"https://mdprofessionalcleaning-api.herokuapp.com/api/v1/\";\n\nexport const loginUser = (user) => {\n  return (dispatch) => {\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({ user }),\n    };\n    fetch(API + \"login\", reqObj)\n      .then((resp) => resp.json())\n      .then((data) => {\n        if (data.user) {\n          dispatch(getUser(data.user));\n          localStorage.setItem(\"token\", data.jwt);\n          //whereever you want to go after logging in\n          history.push(\"/dashboard\");\n        }\n        //however you want  to  handle the error\n        else {\n          history.push(\"/login\");\n        }\n      });\n  };\n};\n\nexport const signUpUser = (user) => {\n  return (dispatch) => {\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({ user }),\n    };\n    fetch(API + \"users\", reqObj)\n      .then((resp) => resp.json())\n      .then((data) => {\n        if (data.user) {\n          dispatch(getUser(data.user));\n          localStorage.setItem(\"token\", data.jwt);\n          //whereever you want to go after logging in\n          history.push(\"/\");\n        } else {\n          //however you want  to  handle the error\n          history.push(\"/signup\");\n        }\n      });\n  };\n};\n\nexport const getCurrentUser = (token) => {\n  return (dispatch) => {\n    const reqObj = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    fetch(API + \"profile\", reqObj)\n      .then((resp) => resp.json())\n      .then((data) => {\n        dispatch(getUser(data.user));\n      });\n  };\n};\n\nexport const logoutUser = () => {\n  return (dispatch) => {\n    localStorage.removeItem(\"token\");\n    dispatch(removeUser());\n    history.push(\"/login\");\n  };\n};\n"]},"metadata":{},"sourceType":"module"}