{"ast":null,"code":"var _jsxFileName = \"/Users/john/Desktop/projects/work/Self/md-professional-cleaning/mdprofesssionalcleaning-admin/src/components/App.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getCurrentUser, logoutUser } from '../actions/user';\nimport Login from './Login';\nimport SignUp from './SignUp';\nimport Main from './Main';\n\nclass App extends Component {\n  componentDidMount() {\n    const {\n      getCurrentUser\n    } = this.props;\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      getCurrentUser(token);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: '/dashboard',\n      component: Main,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: '/',\n      component: Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCurrentUser: token => dispatch(getCurrentUser(token)),\n    logout: () => dispatch(logoutUser())\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/john/Desktop/projects/work/Self/md-professional-cleaning/mdprofesssionalcleaning-admin/src/components/App.js"],"names":["React","Component","Switch","Route","connect","getCurrentUser","logoutUser","Login","SignUp","Main","App","componentDidMount","props","token","localStorage","getItem","render","mapDispatchToProps","dispatch","logout"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,iBAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,GAAN,SAAkBT,SAAlB,CAA4B;AAC1BU,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEN,MAAAA;AAAF,QAAqB,KAAKO,KAAhC;AACA,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIF,KAAJ,EAAW;AACTR,MAAAA,cAAc,CAACQ,KAAD,CAAd;AACD;AACF;;AAEDG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAE,YAAb;AAA2B,MAAA,SAAS,EAAEP,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAE,GAAb;AAAkB,MAAA,SAAS,EAAEF,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CADF;AAQD;;AAlByB;;AAqB5B,MAAMU,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLb,IAAAA,cAAc,EAAGQ,KAAD,IAAWK,QAAQ,CAACb,cAAc,CAACQ,KAAD,CAAf,CAD9B;AAELM,IAAAA,MAAM,EAAE,MAAMD,QAAQ,CAACZ,UAAU,EAAX;AAFjB,GAAP;AAID,CALD;;AAOA,eAAeF,OAAO,CAAC,IAAD,EAAOa,kBAAP,CAAP,CAAkCP,GAAlC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getCurrentUser, logoutUser } from '../actions/user';\nimport Login from './Login';\nimport SignUp from './SignUp';\nimport Main from './Main';\n\nclass App extends Component {\n  componentDidMount() {\n    const { getCurrentUser } = this.props;\n    const token = localStorage.getItem('token');\n    if (token) {\n      getCurrentUser(token);\n    }\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <Switch>\n          <Route path={'/dashboard'} component={Main} />\n          <Route path={'/'} component={Login} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getCurrentUser: (token) => dispatch(getCurrentUser(token)),\n    logout: () => dispatch(logoutUser()),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}